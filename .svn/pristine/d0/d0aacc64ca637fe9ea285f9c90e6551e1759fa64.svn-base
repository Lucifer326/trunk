package com.jeecg.MaterialsOutPut.controller;

import com.jeecg.MaterialsOutPut.common.MaterialsOutPutLogicException;
import com.jeecg.MaterialsOutPut.common.MaterialsOutPutStatusCode;
import com.jeecg.MaterialsOutPut.entity.RepOuthouseDetail;
import com.jeecg.MaterialsOutPut.entity.RepSubstanceOuthouse;
import com.jeecg.MaterialsOutPut.service.RepOuthouseDetailService;
import com.jeecg.MaterialsOutPut.service.RepSubstanceOuthouseService;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.core.util.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 用来处理关于物资出库ajax请求的控制器
 * @version 1.0
 * @auther 甄磊超
 * @Date 2019/4/4
 * @Description com.jeecg.MaterialsOutPut.controller
 */
@Scope("prototype")
@Controller
@RequestMapping("/materialsOutPutController")
public class MaterialsOutPutController extends BaseController {
    @Autowired
    private RepSubstanceOuthouseService repSubstanceOuthouseService;

    private static Logger logger = Logger.getLogger(MaterialsOutPutController.class);

    @RequestMapping(params = "saveOutPut")
    @ResponseBody
    public AjaxJson saveOutPut(RepSubstanceOuthouse outhouse , String warehouseId, HttpServletRequest request){
        AjaxJson json = new AjaxJson();
        //校验表单数据
        String[] subIds = request.getParameterValues("subId");//物资编号
        String[] storageDetails = request.getParameterValues("storageDetail");
        String[] outhouseAmounts = request.getParameterValues("outhouseAmount");//出库量
        if (outhouse == null || StringUtils.isBlank(outhouse.getOuthouseNumber()) || subIds == null || storageDetails == null ||
                StringUtils.isBlank(warehouseId) || outhouseAmounts == null || outhouseAmounts.length != subIds.length || storageDetails.length != subIds.length){
            json.setSuccess(false);
            json.setMsg(MaterialsOutPutStatusCode.FORM_ERROR.getMessage());
            return json;
        }

        Long[] amounts = new Long[outhouseAmounts.length];
        for (int i = 0;i<outhouseAmounts.length;i++){
            if(!StringUtils.isNumeric(outhouseAmounts[i])){
                json.setSuccess(false);
                json.setMsg(MaterialsOutPutStatusCode.OUT_AMOUNT_ERROR.getMessage());
                return json;
            }
            amounts[i] = Long.valueOf(outhouseAmounts[i]);
        }
        try {
            if (StringUtils.isBlank(outhouse.getUuid())){
                //若页面没有传递uuid表示为保存操作
                repSubstanceOuthouseService.addOutHose(outhouse,warehouseId, amounts, subIds,storageDetails);
            }else{
                //修改操作
                repSubstanceOuthouseService.updOuthouse(outhouse,warehouseId,amounts,subIds,storageDetails);
            }
        }catch (MaterialsOutPutLogicException e){
            json.setSuccess(false);
            json.setMsg(e.getMessage());
        } catch (Exception e){
            logger.error(e.getMessage());
            json.setSuccess(false);
            json.setMsg(MaterialsOutPutStatusCode.SYS_ERROR.getMessage());
        }
        return json;
    }

    @RequestMapping( params = "delOutPut")
    @ResponseBody
    public AjaxJson delOutPut(String uuid) {
        AjaxJson json = new AjaxJson();
        if (StringUtils.isBlank(uuid)) {
            json.setSuccess(false);
            json.setMsg(MaterialsOutPutStatusCode.PARAMS_ERROR.getMessage());
            return json;
        }
        //删除物资出库信息
        try {
            repSubstanceOuthouseService.delOutPut(uuid);
        } catch (MaterialsOutPutLogicException e){
            json.setSuccess(false);
            json.setMsg(e.getMessage());
        }catch (Exception e){
            logger.error(e.getMessage());
            json.setSuccess(false);
            json.setMsg(MaterialsOutPutStatusCode.SYS_ERROR.getMessage());
        }
        return json;
    }
}
