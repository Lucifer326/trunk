package com.jeecg.MaterialsInPut.controller;

import com.jeecg.MaterialsInPut.entity.RepSubstanceStorageEntity;
import com.jeecg.MaterialsInPut.service.MaterialsInputService;
import com.jeecg.system_management.common.CommonCode;
import com.jeecg.system_management.common.WarehouseQueryVo;
import com.jeecg.system_management.pojo.RepAccessRepository;
import com.jeecg.system_management.service.WarehouseService;
import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.common.exception.BusinessException;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.web.system.pojo.base.TSType;
import org.jeecgframework.web.system.service.TypeServiceI;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("materialsInputController")
public class MaterialsInputController extends BaseController {

	@Resource
	private MaterialsInputService materialsInputService;

	@Resource
	private WarehouseService warehouseService;

	@Resource
	private TypeServiceI typeServiceImpl;

	/**
	 * 物资入库列表
	 * @param model
	 * @return
	 */
	@RequestMapping(params = "queryAll")
	public String queryAll(Model model, String storageNumber, String storageWarehouse, String repositoryName, String startDate, String endDate) {
		List<Map<String, Object>> maps = materialsInputService.queryAll(storageNumber, storageWarehouse, startDate, endDate);
		System.out.println("查询条件:入库单号=" + storageNumber + "  入库仓库=" + storageWarehouse + "  入库日期=" + startDate + " - " + endDate);
		System.out.println("查询全部:" + maps);
		model.addAttribute("maps", maps);
		model.addAttribute("storageNumber", storageNumber);
		model.addAttribute("storageWarehouse", storageWarehouse);
		model.addAttribute("startDate", startDate);
		model.addAttribute("endDate", endDate);
		model.addAttribute("repositoryName", repositoryName);
		return "jzwz/MaterialsInPut/InStockList";
	}

	/**
	 * 物资入库查看信息
	 * @param model
	 * @return
	 */
	@RequestMapping(params = "inStockLook")
	public String inStockLook(Model model, String ctrl, String uuid) {
		System.out.println("查询:" + ctrl);
		//物资入库详细和物资信息
		List<Map<String, Object>> list = materialsInputService.inStockLook(uuid);
		for (Map<String, Object> map : list) {
			System.out.println("物资入库详细和物资信息查询:" + map);
		}
		//System.out.println("物资入库详细和物资信息查询:" + list);
		//物资入库
		Map<String, Object> map = materialsInputService.queryOne(uuid);
		System.out.println("物资入库查询:" + map);

		//查询数据字典
		List<TSType> purpose = typeServiceImpl.getItems(CommonCode.JZ_PURPOSE);
		List<TSType> source = typeServiceImpl.getItems(CommonCode.WZ_SOURCE);
		model.addAttribute("purpose", purpose);
		model.addAttribute("source", source);
		//放入model
		model.addAttribute("list", list);
		model.addAttribute("repSubstanceStorageEntity", map);

		if ("query".equals(ctrl)) {
			return "jzwz/MaterialsInPut/InStockLook";
		} else {
			return "jzwz/MaterialsInPut/InStockEdit";
		}
	}

	/**
	 * 进入新增页面
	 */
	@RequestMapping(params = "toAdd2")
	public String toAdd2(Model model) {
		//查询数据字典
		List<TSType> purpose = typeServiceImpl.getItems(CommonCode.JZ_PURPOSE);
		List<TSType> source = typeServiceImpl.getItems(CommonCode.WZ_SOURCE);
		model.addAttribute("purpose", purpose);
		model.addAttribute("source", source);
		return "jzwz/MaterialsInPut/add2";
	}

	/**
	 * 新增或修改
	 * @return
	 */
	@RequestMapping(params = "saveOrupdate")
	@ResponseBody
	public AjaxJson saveOrupdate(RepSubstanceStorageEntity repSubstanceStorageEntity, HttpServletRequest request, String ctrl) {
		System.out.println("操作:" + ctrl);
		System.out.println("物资入库信息:" + repSubstanceStorageEntity);

		//获取物资入库详细uuid
		String[] minuteids = request.getParameterValues("minuteid");
		//获取物资信息uuid
		String[] messageids = request.getParameterValues("messageid");
		//获取物资单价(用于计算总价,不需要存入数据库)
		String[] prices = request.getParameterValues("price");
		//获取入库数量
		String[] outputAmounts = request.getParameterValues("outputAmount");
		//=================================================这三个日期需要验证
		//获取购置日期
		String[] purchaseDates = request.getParameterValues("purchaseDate");
		//获取生产日期
		String[] manufactureDates = request.getParameterValues("manufactureDate");
		//获取过保日期
		String[] overinsuredDates = request.getParameterValues("overinsuredDate");

		String delUuid = request.getParameter("del_uuid");
		//================================================================

		System.out.println("物资入库详细:uuid:" + Arrays.toString(minuteids) + ",messageids:" + Arrays.toString(messageids) + ",prices:" + Arrays.toString(prices) +
				",outputAmounts:" + Arrays.toString(outputAmounts) + ",purchaseDates:" + Arrays.toString(purchaseDates) +
				",manufactureDates:" + Arrays.toString(manufactureDates) + ",overinsuredDates:" + Arrays.toString(overinsuredDates) + ",del_uuid:" + delUuid);

		AjaxJson ajaxJson = new AjaxJson();
		try {
			//保存物资入库和物资入库详细
			materialsInputService.saveOrupdateInput(repSubstanceStorageEntity, minuteids, messageids, prices, outputAmounts, purchaseDates, manufactureDates, overinsuredDates, delUuid, ctrl);
			ajaxJson.setMsg("保存成功");
		} catch (BusinessException e) {
			ajaxJson.setSuccess(false);
			ajaxJson.setMsg(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ajaxJson;
	}

	/**
	 * 删除
	 */
	@RequestMapping(params = "delete")
	@ResponseBody
	public AjaxJson delete(String uuids) {
		AjaxJson ajaxJson = new AjaxJson();
		if (uuids == null) {
			ajaxJson.setSuccess(false);
			ajaxJson.setMsg("删除失败");
		} else {
			//List<String> delUuids = new ArrayList<>();
			String[] delUuids = uuids.split("-");
			//for (String strUuid : strUuids) {
			//	delUuids.add(strUuid);
			//}
			//执行批量删除
			System.out.println("批量删除:" + delUuids);
			materialsInputService.delBatch(delUuids);
			ajaxJson.setMsg("删除成功");
		}
		return ajaxJson;
	}

	/**
	 * 进入选择仓库
	 */
	@RequestMapping(params = "selectWarehouse")
	public String toSelectWarehouse(Model model) {
		System.out.println("进入选择仓库");
		List<RepAccessRepository> repositories = warehouseService.repositoryList();
		List<TSType> warehouseType = typeServiceImpl.getItems(CommonCode.WAREHOUSE_TYPE);
		model.addAttribute("warehouseType", warehouseType);
		model.addAttribute("repositories", repositories);
		return "jzwz/MaterialsInPut/SelectWarehouse";
	}

	/**
	 * 选择仓库条件查询
	 */
	@RequestMapping(params = "conditionalQueryWarehouse")
	public String selectWarehouse(Model model, WarehouseQueryVo vo) {
		System.out.println("条件查询:" + vo.getRepositoryName() + "  " + vo.getActivateTimeEnd() + "  " + vo.getActivateTimeStart() + "" + vo.getRepositoryCategory());
		List<RepAccessRepository> repositories;
		repositories = warehouseService.repositoryListByQuery(vo);
		model.addAttribute("repositories", repositories);
		model.addAttribute("vo", vo);
		return "jzwz/MaterialsInPut/SelectWarehouse";
	}

	/**
	 * 修改-->查看(根据物资入库详细uuid查询物资入库详细和物资信息)
	 * @return
	 */
	@RequestMapping(params = "inStockAddLook")
	public String toInStockAddLook(Model model, String uuid) {
		System.out.println("uuid:" + uuid);
		Map<String, Object> map = materialsInputService.queryMinute(uuid);
		model.addAttribute("map", map);
		System.out.println("物资信息查询:" + map);
		return "jzwz/MaterialsInPut/InStockAddLook";
	}

	@RequestMapping(params = "inStockAdd")
	public String toInStockAdd() {
		return "jzwz/MaterialsInPut/InStockAdd";
	}

	/**
	 * 选择区划页面
	 *
	 * @return
	 */
	@RequestMapping(params = "selectDiv")
	public String showSelectDiv() {
		return "jzwz/CommonPage/SelectDiv";
	}
}
